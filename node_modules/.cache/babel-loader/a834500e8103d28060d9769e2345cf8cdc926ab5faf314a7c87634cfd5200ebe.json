{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    incerement(state) {\n      state.counter++;\n    },\n    decerement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthanticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  authentication,\n  reducer: {\n    login(state) {\n      state.authentication = true;\n    },\n    logout() {\n      state.isAuthanticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\n// store.dispatch({ type: \"increment\" });\n// store.dispatch({ type: \"decrement\" });\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","reducers","incerement","state","decerement","increase","action","payload","toggleCounter","initialAuthState","isAuthanticated","authSlice","authentication","reducer","login","logout","store","counterActions","actions"],"sources":["/Users/aripov/Desktop/react-projects/redux-counter/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    incerement(state) {\n      state.counter++;\n    },\n    decerement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst initialAuthState = { isAuthanticated: false };\n\nconst authSlice = createSlice({\n  name: \"authentication\",\n  authentication,\n  reducer: {\n    login(state) {\n      state.authentication = true;\n    },\n    logout() {\n      state.isAuthanticated = false;\n    },\n  },\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n// store.dispatch({ type: \"increment\" });\n// store.dispatch({ type: \"decrement\" });\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE7D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfJ,mBAAmB;EACnBK,QAAQ,EAAE;IACRC,UAAU,CAACC,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,UAAU,CAACD,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAa,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMW,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;AAEnD,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBY,cAAc;EACdC,OAAO,EAAE;IACPC,KAAK,CAACX,KAAK,EAAE;MACXA,KAAK,CAACS,cAAc,GAAG,IAAI;IAC7B,CAAC;IACDG,MAAM,GAAG;MACPZ,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMM,KAAK,GAAGrB,cAAc,CAAC;EAC3BkB,OAAO,EAAEd,YAAY,CAACc;AACxB,CAAC,CAAC;AACF;AACA;;AAEA,OAAO,MAAMI,cAAc,GAAGlB,YAAY,CAACmB,OAAO;AAClD,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}